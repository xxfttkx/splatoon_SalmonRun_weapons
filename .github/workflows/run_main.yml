name: Run main.py every 8 hours

on:
  workflow_dispatch:
  schedule:
    # 使用 Cron 表达式设置每 8 小时运行一次
    - cron: "0 */8 * * *"  # 每 8 小时运行一次

jobs:
  run-script:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境

    env:
      LANG: ja_JP.UTF-8  # 设置语言环境
      LC_ALL: ja_JP.UTF-8 # 可选，确保语言环境一致

    steps:
      # 检出代码库
      - name: Checkout code
        uses: actions/checkout@v3

      # 安装支持日语的字体
      - name: Install Japanese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk 

      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"  # 使用 Python 3.x

      # 安装 Python 依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      # 安装 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"  # 替换为你需要的 Node.js 版本

      # 运行 npm install 安装 JS 依赖
      - name: Install Node.js dependencies
        run: |
          npm install

      # 运行 Python 脚本
      - name: Run main.py
        run: |
          python main.py

      # Check if there are changes
      - name: Check if there are changes
        id: check_changes
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi
      
      # 自动添加和提交更改
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: '.' # 添加所有更改
          message: "Automated changes by GitHub Actions" # 提交信息
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 提供的默认 token

      # 生成时间戳
      - name: Set timestamp (CST/东八区)
        run: echo "TIMESTAMP=$(TZ=Asia/Shanghai date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      # **创建 GitHub Release**
      - name: Create GitHub Release
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "release-${{ env.TIMESTAMP }}" --title "Salmon Run ${{ env.TIMESTAMP }}" --notes "图片将在几秒后显示..."

      # **上传 PNG**
      - name: Upload PNG to Release
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "release-${{ env.TIMESTAMP }}" output.png

      # **更新 Release 的 Notes，插入图片**
      - name: Update Release Notes with Image
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IMAGE_URL="https://github.com/xxfttkx/splatoon_SalmonRun_weapons/releases/download/release-${{ env.TIMESTAMP }}/output.png"
          gh release edit "release-${{ env.TIMESTAMP }}" --notes "![Salmon Run]($IMAGE_URL)"
